/* automatically generated by rust-bindgen 0.71.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const SCREEN_WIDTH: u32 = 40;
pub const SCREEN_HEIGHT: u32 = 25;
pub type i32_ = cty::c_int;
pub type u32_ = cty::c_uint;
pub type i8_ = cty::c_schar;
pub type u8_ = cty::c_uchar;
pub type byte = cty::c_uchar;
pub type bool_ = u8_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct U64 {
    pub low: u32_,
    pub high: u32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of U64"][::core::mem::size_of::<U64>() - 8usize];
    ["Alignment of U64"][::core::mem::align_of::<U64>() - 4usize];
    ["Offset of field: U64::low"][::core::mem::offset_of!(U64, low) - 0usize];
    ["Offset of field: U64::high"][::core::mem::offset_of!(U64, high) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct I64 {
    pub low: i32_,
    pub high: i32_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of I64"][::core::mem::size_of::<I64>() - 8usize];
    ["Alignment of I64"][::core::mem::align_of::<I64>() - 4usize];
    ["Offset of field: I64::low"][::core::mem::offset_of!(I64, low) - 0usize];
    ["Offset of field: I64::high"][::core::mem::offset_of!(I64, high) - 4usize];
};
unsafe extern "C" {
    pub fn bitlen32(arg1: u32_) -> i32_;
}
unsafe extern "C" {
    pub fn getbit(arg1: u32_, arg2: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn setbit(arg1: u32_, arg2: i32_, arg3: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn bitlen64(xlo: u32_, xhi: u32_) -> i32_;
}
unsafe extern "C" {
    pub fn lshift64(xlo: u32_, xhi: u32_, val: i32_) -> u32_;
}
unsafe extern "C" {
    pub fn getbit64(xlo: u32_, xhi: u32_, bit: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn setbit64(xlo: u32_, xhi: u32_, bit: i32_, val: i32_) -> i32_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FileInfo {
    pub id: u32_,
    pub size: u32_,
    pub flags: u8_,
    pub name: [cty::c_char; 30usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FileInfo"][::core::mem::size_of::<FileInfo>() - 40usize];
    ["Alignment of FileInfo"][::core::mem::align_of::<FileInfo>() - 4usize];
    ["Offset of field: FileInfo::id"][::core::mem::offset_of!(FileInfo, id) - 0usize];
    ["Offset of field: FileInfo::size"][::core::mem::offset_of!(FileInfo, size) - 4usize];
    ["Offset of field: FileInfo::flags"][::core::mem::offset_of!(FileInfo, flags) - 8usize];
    ["Offset of field: FileInfo::name"][::core::mem::offset_of!(FileInfo, name) - 9usize];
};
unsafe extern "C" {
    pub fn file_scan_dir(
        callback: ::core::option::Option<unsafe extern "C" fn(arg1: *mut FileInfo) -> cty::c_int>,
        arg1: *mut cty::c_void,
    ) -> u32_;
}
unsafe extern "C" {
    pub fn file_find(fname: *mut cty::c_char) -> cty::c_int;
}
unsafe extern "C" {
    pub fn printc(ch: cty::c_char) -> i32_;
}
unsafe extern "C" {
    pub fn printw(bytes: u32_) -> i32_;
}
unsafe extern "C" {
    pub fn prints(str_: *const cty::c_char) -> i32_;
}
unsafe extern "C" {
    pub fn println(str_: *const cty::c_char) -> i32_;
}
unsafe extern "C" {
    pub fn printnum(num: u32_) -> i32_;
}
unsafe extern "C" {
    pub fn getc() -> i32_;
}
unsafe extern "C" {
    pub fn read_line(arg1: *mut cty::c_char) -> i32_;
}
unsafe extern "C" {
    pub fn abs(arg1: cty::c_int) -> cty::c_int;
}
unsafe extern "C" {
    pub fn sign(arg1: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn udiv32(arg1: u32_, arg2: u32_) -> u32_;
}
unsafe extern "C" {
    pub fn urem32(arg1: u32_, arg2: u32_) -> u32_;
}
unsafe extern "C" {
    pub fn div32(arg1: i32_, arg2: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn rem32(arg1: i32_, arg2: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn pow32(arg1: i32_, arg2: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn mul32(arg1: i32_, arg2: i32_) -> I64;
}
unsafe extern "C" {
    pub fn uadd64(xlo: u32_, xhi: u32_, ylo: u32_, yhi: u32_) -> U64;
}
unsafe extern "C" {
    pub fn usub64(xlo: u32_, xhi: u32_, ylo: u32_, yhi: u32_) -> U64;
}
unsafe extern "C" {
    pub fn udiv64(nlo: u32_, nhi: u32_, dlo: u32_, dhi: u32_) -> U64;
}
unsafe extern "C" {
    pub fn ucmp64(xlo: u32_, xhi: u32_, ylo: u32_, yhi: u32_) -> cty::c_int;
}
unsafe extern "C" {
    pub fn memcpy(dst: u32_, src: u32_, cnt: i32_) -> u32_;
}
unsafe extern "C" {
    pub fn memfill(start: u32_, cnt: i32_, value: i32_) -> u32_;
}
unsafe extern "C" {
    pub fn mem_reverse(start: *mut cty::c_char, cnt: i32_) -> i32_;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScrPoint {
    pub x: byte,
    pub y: byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScrPoint"][::core::mem::size_of::<ScrPoint>() - 2usize];
    ["Alignment of ScrPoint"][::core::mem::align_of::<ScrPoint>() - 1usize];
    ["Offset of field: ScrPoint::x"][::core::mem::offset_of!(ScrPoint, x) - 0usize];
    ["Offset of field: ScrPoint::y"][::core::mem::offset_of!(ScrPoint, y) - 1usize];
};
unsafe extern "C" {
    pub fn scr_init();
}
unsafe extern "C" {
    pub fn clear_screen();
}
unsafe extern "C" {
    pub fn scr_get_size() -> ScrPoint;
}
unsafe extern "C" {
    pub fn get_cursor_pos() -> ScrPoint;
}
unsafe extern "C" {
    pub fn set_cursor_pos(x: u32_, y: u32_);
}
unsafe extern "C" {
    pub fn show_cursor();
}
unsafe extern "C" {
    pub fn scr_print(str_: *const cty::c_char);
}
unsafe extern "C" {
    pub fn scr_println(str_: *const cty::c_char);
}
unsafe extern "C" {
    pub fn scr_backspace();
}
unsafe extern "C" {
    pub fn itoa(num: i32_, str_: *mut cty::c_char, base: i32_) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn utoa(num: u32_, str_: *mut cty::c_char, base: i32_) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn atoi(str_: *const cty::c_char, base: i32_) -> i32_;
}
unsafe extern "C" {
    pub fn strlen(str_: *const cty::c_char) -> u32_;
}
unsafe extern "C" {
    pub fn strcmp(str1: *const cty::c_char, str2: *const cty::c_char) -> cty::c_int;
}
unsafe extern "C" {
    pub fn strcpy(dst: *mut cty::c_char, src: *const cty::c_char) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn str_find_char(str_: *mut cty::c_char, charcode: u32_) -> i32_;
}
unsafe extern "C" {
    pub fn str_align_right(str_: *mut cty::c_char, len: i32_, fill: cty::c_char) -> i32_;
}
unsafe extern "C" {
    pub fn sleep(ms: u32_);
}
unsafe extern "C" {
    pub fn term_show_cursor();
}
unsafe extern "C" {
    pub fn term_hide_cursor();
}
unsafe extern "C" {
    pub fn term_reset();
}
unsafe extern "C" {
    pub fn term_set_screencode(code: byte, unicode: u32_);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Time {
    pub seconds: byte,
    pub minutes: byte,
    pub hours: byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Time"][::core::mem::size_of::<Time>() - 3usize];
    ["Alignment of Time"][::core::mem::align_of::<Time>() - 1usize];
    ["Offset of field: Time::seconds"][::core::mem::offset_of!(Time, seconds) - 0usize];
    ["Offset of field: Time::minutes"][::core::mem::offset_of!(Time, minutes) - 1usize];
    ["Offset of field: Time::hours"][::core::mem::offset_of!(Time, hours) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Date {
    pub day: byte,
    pub month: byte,
    pub year: byte,
    pub dow: byte,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Date"][::core::mem::size_of::<Date>() - 4usize];
    ["Alignment of Date"][::core::mem::align_of::<Date>() - 1usize];
    ["Offset of field: Date::day"][::core::mem::offset_of!(Date, day) - 0usize];
    ["Offset of field: Date::month"][::core::mem::offset_of!(Date, month) - 1usize];
    ["Offset of field: Date::year"][::core::mem::offset_of!(Date, year) - 2usize];
    ["Offset of field: Date::dow"][::core::mem::offset_of!(Date, dow) - 3usize];
};
unsafe extern "C" {
    pub fn get_time(secs: u32_) -> Time;
}
unsafe extern "C" {
    pub fn get_date(secs: u32_) -> Date;
}
unsafe extern "C" {
    pub fn time_to_str(time: Time, str_: *mut cty::c_char) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn date_to_str(date: Date, str_: *mut cty::c_char) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn date_time_to_str(date: u32_, str_: *mut cty::c_char) -> *mut cty::c_char;
}
unsafe extern "C" {
    pub fn time_now() -> u32_;
}
unsafe extern "C" {
    pub fn utf_encode(codepoint: u32_, bytes: *mut u32_) -> byte;
}
